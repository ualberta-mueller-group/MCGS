

# Static class members are global variables


Checks: '-*,readability-identifier-naming'
WarningsAsErrors: '-*,readability-identifier-naming'
CheckOptions:

#<l>
  - { key: readability-identifier-naming.ClassCase, value: lower_case }
#  - { key: readability-identifier-naming.ClassMemberCase, value: lower_case }
#  - { key: readability-identifier-naming.ClassMethodCase, value: lower_case }
#  - { key: readability-identifier-naming.ConstantCase, value: lower_case }
  - { key: readability-identifier-naming.ConstantParameterCase, value: lower_case }
  - { key: readability-identifier-naming.ConstantPointerParameterCase, value: lower_case }
  - { key: readability-identifier-naming.EnumCase, value: lower_case }
  - { key: readability-identifier-naming.FunctionCase, value: lower_case }
  - { key: readability-identifier-naming.GlobalVariableCase, value: lower_case }
  - { key: readability-identifier-naming.LocalConstantCase, value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase, value: lower_case }
  - { key: readability-identifier-naming.MemberCase, value: lower_case }
  - { key: readability-identifier-naming.MethodCase, value: lower_case }
  - { key: readability-identifier-naming.NamespaceCase, value: lower_case }
  - { key: readability-identifier-naming.ParameterCase, value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberCase, value: lower_case }
  - { key: readability-identifier-naming.PrivateMethodCase, value: lower_case }
  - { key: readability-identifier-naming.ProtectedMemberCase, value: lower_case }
  - { key: readability-identifier-naming.ProtectedMethodCase, value: lower_case }
  - { key: readability-identifier-naming.PublicMemberCase, value: lower_case }
  - { key: readability-identifier-naming.PublicMethodCase, value: lower_case }
  - { key: readability-identifier-naming.StaticVariableCase, value: lower_case }
  - { key: readability-identifier-naming.StructCase, value: lower_case }
  - { key: readability-identifier-naming.TypeAliasCase, value: lower_case }
  - { key: readability-identifier-naming.TypedefCase, value: lower_case }
  - { key: readability-identifier-naming.UnionCase, value: lower_case }
#  - { key: readability-identifier-naming.VariableCase, value: lower_case }
  - { key: readability-identifier-naming.VirtualMethodCase, value: lower_case }

#<u>
  - { key: readability-identifier-naming.ClassConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.ConstexprVariableCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.EnumConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.GlobalConstantCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.StaticConstantCase, value: UPPER_CASE }

#<?>
#  - { key: readability-identifier-naming.AggressiveDependentMemberLookup, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.CheckAnonFieldInParent, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.GetConfigPerFile, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.IgnoreMainLikeFunctions, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.InlineNamespaceCase, value: <SOMEVALUE> }


#<_>
  - { key: readability-identifier-naming.PrivateMemberPrefix, value: _ }
  - { key: readability-identifier-naming.ProtectedMemberPrefix, value: _ }

# TODO: Probably keep these?
#  - { key: readability-identifier-naming.PrivateMethodPrefix, value: _ }
#  - { key: readability-identifier-naming.ProtectedMethodPrefix, value: _ }

# This allows private methods to keep or omit the "_"
  - { key: readability-identifier-naming.PrivateMethodIgnoredRegexp, value: "_[a-z_0-9]+" }
  - { key: readability-identifier-naming.ClassMemberIgnoredRegexp, value: "_[a-z_0-9]+" }

  - { key: readability-identifier-naming.LocalConstantIgnoredRegexp, value: "([a-z_0-9]+|[A-Z0-9]+)" }









#<k>
#  - { key: readability-identifier-naming.ConceptCase, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.ConstexprFunctionCase, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.ConstexprMethodCase, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.ParameterPackCase, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.TemplateParameterCase, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.TemplateTemplateParameterCase, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.TypeTemplateParameterCase, value: <SOMEVALUE> }
#  - { key: readability-identifier-naming.ValueTemplateParameterCase, value: <SOMEVALUE> }

#<i>



HeaderFilterRegex: .h
SystemHeaders: false
