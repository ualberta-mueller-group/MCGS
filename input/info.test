{version 1.0}
/ This is a comment\

/_ This file is valid input to MCGS, and describes the input syntax.

There are 5 types of 'things' that appear in input: 
    Section titles
        Enclosed by '[' and ']', text inside a section title defines what type
        of game to interpret subsequent text as. Sections persist until
        a new section title is encountered.

        i.e. '[clobber_1xn]'

    Comments
        Enclosed by '/' and '\', text inside a comment is used by humans
        reading input files, and may be included in output from MCGS's testing
        framework. More on this later.

    Commands
        Enclosed by '{' and '}', commands are used to solve sums of games for 
        one or more players, optionally defining an expected result (win/loss).
        Commands are also used to specify what version of the input language
        is used by a file. The version command must be present in files, but
        can be omitted from input read from stdin or passed as a command line
        argument to MCGS. The current version is 1.0.
            i.e.
            Version command:
                {version 1.0}

            Solve the current game sum for black, without expecting a particular
            result:
                {B}
            Solve the current game sum for black, and then white, expecting
            white to win.
                {B, W win}
            Solve the current game sum for white, then black, expecting
            white to lose and black to win.
                {W loss, B win}

            'Solve' commands can solve a game sum up to 2 times, i.e.
            {B, W, B} is illegal

    Bracketed games
        Enclosed by '(' and ')', text inside a bracketed game defines a single
        game within the current section. The type of game depends on the
        section.

        i.e. 
        A single game 'XOXOXO':
            (XOXOXO)
        A single game '1 2':
            (1 2)

    Unbracketed games
        Whitespace-separated text not matched by the aforementioned cases
        defines a single game within the current section. The type of game
        depends on the section.

    i.e.
    define two games, 'XO.X' and 'XO':
        XO.X XO
    define one game, '5':
        5



    The following example solves a sum of
        2 clobber_1xn games
        2 integer_game games
        2 more clobber_1xn games
        1 dyadic_rational game
    Twice: once for black, then white. Then it solves an 
    empty sum for black, expecting a loss.

\

[clobber_1xn] XOXO OXX
[integer_game] 4
/ Comments can go here too. \
-5
[clobber_1xn]
XOXOO...XO
(XO)
[dyadic_rational]
(3 4) / Dyadic rational games are defined by 2 ints, so they must be
defined in brackets. \
{B, W}

/Now the current game sum is empty. The next line solves an empty sum\
{B loss}


/
        More on syntax:

    Comments by default belong to the sum solved by the next
    'solve' command. These will be included in output from
    MCGS's testing framework.

    If a comment starts with '_', it will not be included in output.

    If a comment starts with '#0' or '#1', it will only be included in 
    output for the 1st or 2nd (sum, player) pair solved by the
    next 'solve' command.


    Enclosing symbols i.e. '[', ']', '(', ')', etc must have at least one
    whitespace character before (or after) them. The following is illegal:
        [integer_game]3
    or
        3(4)


    Names of sections, i.e. [clobber_1xn] are defined by the
    add_game_parser() function of the file_parser class in file_parser.h
\
