#pragma once
#include <memory>
#include <type_traits>
#include "game.h"

static_assert(false);
/*
    TODO: std::pointer_traits is not SFINAE-friendly on gcc 9.4; either delete
    this file (it's not critical), or find a workaround...

    This behavior was retroactively added to the C++11 standard, so this code
    is supposed to compile
*/


static_assert(std::is_pointer_v<int*>);
static_assert(!std::is_pointer_v<std::shared_ptr<int>>);


namespace custom_traits {
// NOLINTBEGIN(readability-identifier-naming)
// clang-format off

//////////////////////////////////////// __type_valid<T>
/*
    Always true; used as a hack with std::enable_if to enable template specializations
        whenever T is valid
*/
template <class T>
struct __type_valid
{
    constexpr static bool value = true;
};

template <class T>
constexpr bool __type_valid_v = __type_valid<T>::value;

//////////////////////////////////////// is_smart_ptr<T>
/*
   True iff T is a smart pointer. False for raw pointers
*/
template <class T, typename Enable = void>
struct is_smart_ptr
{
    constexpr static bool value = false;
};

// Specialization for when T is some pointer (when pointer_traits<T>::element_type is valid)
template <class T>
struct is_smart_ptr<
    T,
    std::enable_if_t<
        __type_valid_v<typename std::pointer_traits<T>::element_type>,
        void
    >
>
{
    constexpr static bool value = !std::is_pointer_v<T>; // not raw pointer
};

template <class T>
constexpr bool is_smart_ptr_v = is_smart_ptr<T>::value;

//////////////////////////////////////// is_some_ptr<T>
template <class T>
struct is_some_ptr
{
    constexpr static bool value = std::is_pointer_v<T> || is_smart_ptr_v<T>;
};

template <class T>
constexpr bool is_some_ptr_v = is_some_ptr<T>::value;

//////////////////////////////////////// is_some_game_ptr<T>
template <class T, typename Enable = void>
struct is_some_game_ptr
{
    constexpr static bool value = false;
};

// Specialization for pointer types
template <class T>
struct is_some_game_ptr<T, typename std::enable_if_t<is_some_ptr_v<T>, void>>
{
    using Element = typename std::pointer_traits<T>::element_type;

    constexpr static bool value = std::is_base_of_v<game, Element>;
};

template <class T>
constexpr bool is_some_game_ptr_v = is_some_game_ptr<T>::value;

// clang-format on
// NOLINTEND(readability-identifier-naming)
} // namespace custom_traits
