When outputting included comments, first write a number indicating how many comment lines follow. This makes parsing comments from ./MCGS --print-tests easy

New line for each field instead of CSV. "Newline separated values", with some types specifying how many lines they span

Use "/input/autotests" directory for now

Add type checking in the future?


Flesh out design first, then pare down for V1

./MCGS --persist
    <-- like "--stdin"? What's the difference, if any?





"./MCGS --file some-file.test --case 3" (runs only case 3 from a file)

============================================================

./MCGS --file some-file.test --print-cases
    <-- prints info used by testing framework


<case count>

<index major> <index minor>
<to play>
<expected value>
<test case hash>
<line count> <human readable representation>
<line count> <included comments>




Have --persist just read file names from stdin

============================================================
Screen scraping is messy and unreliable --> don't use an external python tool

A test case crashing must not crash the testing tool --> can't just call parse_chunk() and use the data

MCGS needs to parse the input for me to even know how many cases are in the file

./MCGS --run-tests
    <-- use this instead of a Python tool.
    Less screen scraping
    Spawns a subprocess (for every case, or once)

./MCGS --file somefile.test --case 3
    <-- run case 3
    Report its running time as part of the output. This way, parsing time isn't included
    

    In the future, "--persist" can read lines like: somefile.test 3


./MCGS --run-tests
./MCGS --file fileName --case caseNumber

./MCGS --persist
    fileName caseNumber
