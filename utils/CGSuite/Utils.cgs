////////////////////////////////////////////////// Utility functions
def assert(condition, message ? "Assertion failed") begin
    if not condition then
        System.Error(message);
    end
end

def print(obj) begin
    System.Print(obj);
end

def to_string(obj) begin
    if obj is String then
        obj;
    else
        obj.ToString;
    end
end

def join(collection, separator_string ? ", ") begin
    assert(collection is Collection);
    assert(separator_string is String);

    line := "";

    as_list := collection.ToList;
    for i from 1 to as_list.Size do
        line := line.Concat(to_string(as_list[i]));

        if (i + 1) <= as_list.Size then
            line := line.Concat(separator_string);
        end
    end

    line;
end

def integer_divide(a, b) begin
    assert(a is game.Integer);
    assert(b is game.Integer);
    (a - (a % b)) / b;
end

def mcgs_to_elephants(mcgs_string) begin
    assert(mcgs_string is String);
    mcgs_string.Replace("X", "t").Replace("O", "f");
end

def sum_games(games) begin
    assert(games is Collection);
    for g in games do
        assert(g is game.Game);
    end

    if games.Size == 0 then
        0;
    end

    sum := games[1];
    for i from 2 to games.Size do
        sum := sum + games[i];
    end

    sum;
end

def make_impartial(g) begin
    assert(g is game.Game);
    game.variant.ImpartialVariantGame(g);
end

;
